openapi: 3.0.0
info:
  title: users
  version: '1.0'
  description: ユーザー情報を管理する
  contact:
    name: rowpure
servers:
  - url: 'http://localhost/api/v1'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: string
          format: uuid
          example: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        name: userId
        in: path
        required: true
        description: 存在するユーザーID
    get:
      summary: ユーザー詳細
      tags:
        - User
      responses:
        '200':
          description: 存在するユーザー情報
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    data:
                      id: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
                      loginId: saitou
                      roleName: viewer
                      firstName: 太郎
                      lastName: 斉藤
                      firstNameKana: タロウ
                      lastNameKana: サイトウ
                      mailAddress: saito@example.com
                      sex: '1'
                      birthDay: '1990-01-01'
                      cellPhoneNumber: '09012345678'
                      remarks: メモ
                      profileImageURL: 'http://localhost/uploadFiles/Users/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/example.png'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
              examples:
                example:
                  value:
                    error:
                      message: Not Found
                      errors:
                        - field: userId
                          reason: ユーザーは存在しません。
      operationId: get-users-userId
      description: ユーザーIDと一致するユーザー情報を返却する
    put:
      summary: ユーザー更新
      operationId: put-users-userId
      responses:
        '200':
          description: 更新後のユーザーID
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    description: ユーザーID
                    example: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
                    pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
                    format: uuid
              examples:
                example:
                  value:
                    userId: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
              examples:
                example:
                  value:
                    error:
                      message: Bad Request
                      errors:
                        - field: loginId
                          reason: ログインIDは既に存在しています。
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
              examples:
                example:
                  value:
                    error:
                      message: Not Found
                      errors:
                        - field: userId
                          reason: ユーザーは存在しません。
      description: ユーザーが存在すればユーザー情報を更新する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                loginId:
                  type: string
                  example: saitou
                  description: ログインID
                  maxLength: 50
                password:
                  type: string
                  format: password
                  description: ログインパスワード
                  maxLength: 255
                roleName:
                  type: string
                  enum:
                    - admin
                    - editor
                    - viewer
                  default: viewer
                  example: viewer
                  description: ロール名
                  maxLength: 20
                firstName:
                  type: string
                  description: 名
                  example: 太郎
                  maxLength: 50
                lastName:
                  type: string
                  description: 姓
                  example: 斉藤
                  maxLength: 50
                firstNameKana:
                  type: string
                  description: 名（カナ）
                  example: タロウ
                  maxLength: 50
                lastNameKana:
                  type: string
                  description: 姓（カナ）
                  example: サイトウ
                  maxLength: 50
                mailAddress:
                  type: string
                  description: メールアドレス
                  maxLength: 255
                  format: email
                  example: saito@example.com
                  pattern: '^([\w])+([\w._-])*@([\w_-])+([\w._-]+)+$'
                sex:
                  type: string
                  description: 性別
                  maxLength: 1
                  minLength: 1
                  example: '1'
                  default: '0'
                  enum:
                    - '0'
                    - '1'
                    - '2'
                    - '9'
                birthDay:
                  type: string
                  description: 誕生日
                  format: date
                  example: '1990-01-01'
                  pattern: '^[\d]{4}\-((0[1-9]|1[0-2])|(\d{1}))\-((0[1-9]|[12][\d]|3[01])|(\d{1}))$'
                cellPhoneNumber:
                  type: string
                  description: 携帯電話番号
                  maxLength: 11
                  example: '09012345678'
                  pattern: '^\d{11}$'
                remarks:
                  type: string
                  example: メモ
                  description: メモ
                profileImageURL:
                  type: string
                  format: uri
                  description: プロフィール画像URL
                  example: 'http://localhost/uploadFiles/Users/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/example.png'
              required:
                - loginId
                - password
                - roleName
                - firstName
                - lastName
                - firstNameKana
                - lastNameKana
                - mailAddress
                - sex
            examples:
              example:
                value:
                  loginId: saitou
                  password: pa$$word
                  roleName: viewer
                  firstName: 太郎
                  lastName: 斉藤
                  firstNameKana: タロウ
                  lastNameKana: サイトウ
                  mailAddress: saito@example.com
                  sex: '0'
                  birthDay: '1990-01-01'
                  cellPhoneNumber: '09012345678'
                  remarks: メモ
                  profileImageURL: 'http://localhost/uploadFiles/Users/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/example.png'
        description: ユーザー情報を更新する
      tags:
        - User
    delete:
      summary: ユーザー削除
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
              examples:
                example:
                  value:
                    error:
                      message: Not Found
                      errors:
                        - field: userId
                          reason: ユーザーは存在しません。
      description: ユーザーが存在すればユーザー情報を削除する
      tags:
        - User
  /users:
    post:
      summary: ユーザー新規作成
      operationId: post-user
      responses:
        '200':
          description: 作成後のユーザーID
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    description: ユーザーID
                    example: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
                    format: uuid
                    pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
              examples:
                example:
                  value:
                    userId: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
              examples:
                example:
                  value:
                    error:
                      message: Bad Request
                      errors:
                        - field: loginId
                          reason: ログインIDは既に存在しています。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                loginId:
                  type: string
                  example: saitou
                  description: ログインID
                  maxLength: 50
                password:
                  type: string
                  format: password
                  description: ログインパスワード
                  maxLength: 255
                roleName:
                  type: string
                  enum:
                    - admin
                    - editor
                    - viewer
                  default: viewer
                  example: viewer
                  description: ロール名
                  maxLength: 20
                firstName:
                  type: string
                  description: 名
                  example: 太郎
                  maxLength: 50
                lastName:
                  type: string
                  description: 姓
                  example: 斉藤
                  maxLength: 50
                firstNameKana:
                  type: string
                  description: 名（カナ）
                  example: タロウ
                  maxLength: 50
                lastNameKana:
                  type: string
                  description: 姓（カナ）
                  example: サイトウ
                  maxLength: 50
                mailAddress:
                  type: string
                  description: メールアドレス
                  maxLength: 255
                  format: email
                  example: saito@example.com
                  pattern: '^([\w])+([\w._-])*@([\w_-])+([\w._-]+)+$'
                sex:
                  type: string
                  description: 性別
                  maxLength: 1
                  minLength: 1
                  example: '1'
                  default: '0'
                  enum:
                    - '0'
                    - '1'
                    - '2'
                    - '9'
                birthDay:
                  type: string
                  description: 誕生日
                  format: date
                  example: '1990-01-01'
                  pattern: '^[\d]{4}\-((0[1-9]|1[0-2])|(\d{1}))\-((0[1-9]|[12][\d]|3[01])|(\d{1}))$'
                cellPhoneNumber:
                  type: string
                  description: 携帯電話番号
                  maxLength: 11
                  example: '09012345678'
                  pattern: '^\d{11}$'
                remarks:
                  type: string
                  example: メモ
                  description: メモ
                profileImageURL:
                  type: string
                  format: uri
                  example: 'http://localhost/uploadFiles/Users/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/example.png'
                  description: プロフィール画像URL
              required:
                - loginId
                - password
                - roleName
                - firstName
                - lastName
                - firstNameKana
                - lastNameKana
                - mailAddress
                - sex
            examples:
              example:
                value:
                  loginId: saitou
                  password: pa$$word
                  roleName: viewer
                  firstName: 太郎
                  lastName: 斉藤
                  firstNameKana: タロウ
                  lastNameKana: サイトウ
                  mailAddress: saito@example.com
                  sex: '0'
                  birthDay: '1990-01-01'
                  cellPhoneNumber: '09012345678'
                  remarks: メモ
                  profileImageURL: 'http://localhost/uploadFiles/Users/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/example.png'
        description: APIに必要なフィールドを設定し、新しいユーザーを作成する
      description: ユーザーを新規作成する
      tags:
        - User
    parameters: []
    get:
      summary: ユーザー一覧
      operationId: get-users
      responses:
        '200':
          description: 全てのユーザー情報の一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    data:
                      - id: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
                        loginId: saitou
                        roleName: viewer
                        firstName: 太郎
                        lastName: 斉藤
                        firstNameKana: タロウ
                        lastNameKana: サイトウ
                        mailAddress: saito@example.com
                        sex: '1'
                        birthDay: '1990-01-01'
                        cellPhoneNumber: '09012345678'
                        remarks: メモ
                        profileImageURL: 'http://localhost/uploadFiles/Users/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/example.png'
      description: ユーザー情報の一覧を返却する
      tags:
        - User
      parameters:
        - schema:
            type: string
            example: メモ
          in: query
          name: q
          description: 検索キーワード
          allowEmptyValue: true
components:
  schemas:
    User:
      title: User
      type: object
      description: ユーザー情報
      x-examples:
        example:
          id: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
          loginId: saitou
          roleName: viewer
          firstName: 太郎
          lastName: 斉藤
          firstNameKana: タロウ
          lastNameKana: サイトウ
          mailAddress: saito@example.com
          sex: '0'
          birthDay: '1990-01-01'
          cellPhoneNumber: '09012345678'
          remarks: メモ
          profileImageURL: 'http://localhost/uploadFiles/Users/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/example.png'
      properties:
        id:
          type: string
          description: ユーザーID
          example: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
          format: uuid
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
        loginId:
          type: string
          description: ログインID
          example: saitou
          maxLength: 50
        roleName:
          type: string
          enum:
            - admin
            - editor
            - viewer
          default: viewer
          description: ロール名
          example: viewer
          maxLength: 20
        firstName:
          type: string
          description: 名
          example: 太郎
          maxLength: 50
        lastName:
          type: string
          description: 姓
          example: 斉藤
          maxLength: 50
        firstNameKana:
          type: string
          example: タロウ
          description: 名（カナ）
          maxLength: 50
        lastNameKana:
          type: string
          example: サイトウ
          description: 姓（カナ）
          maxLength: 50
        mailAddress:
          type: string
          description: メールアドレス
          format: email
          example: saito@example.com
          maxLength: 255
          pattern: '^([\w])+([\w._-])*@([\w_-])+([\w._-]+)+$'
        sex:
          type: string
          description: 性別
          maxLength: 1
          example: '1'
          default: '0'
          enum:
            - '0'
            - '1'
            - '2'
            - '9'
          minLength: 1
        birthDay:
          type: string
          description: 誕生日
          format: date
          example: '1990-01-01'
          pattern: '^[\d]{4}\-((0[1-9]|1[0-2])|(\d{1}))\-((0[1-9]|[12][\d]|3[01])|(\d{1}))$'
        cellPhoneNumber:
          type: string
          description: 携帯電話番号
          maxLength: 11
          pattern: '^\d{11}$'
          example: '09012345678'
        remarks:
          type: string
          example: メモ
          description: メモ
        profileImageURL:
          type: string
          description: プロフィール画像URL
          example: 'http://localhost/uploadFiles/Users/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/example.png'
          format: uri
      required:
        - id
        - loginId
        - roleName
        - firstName
        - lastName
        - firstNameKana
        - lastNameKana
        - mailAddress
        - sex
    Error400:
      title: Error400
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: エラーメッセージ
              example: Bad Request
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: エラーの項目名
                  reason:
                    type: string
                    description: エラーの理由
      x-examples:
        example:
          error:
            message: Bad Request
            errors:
              - field: string
                reason: string
      description: 400エラー
    Error404:
      title: Error404
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: エラーメッセージ
              example: Not Found
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: エラーの項目名
                  reason:
                    type: string
                    description: エラーの理由
      x-examples:
        example:
          error:
            message: Not Found
            errors:
              - field: string
                reason: string
      description: 404エラー
tags:
  - name: User
